// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManagementSystem.TaskBoardService.Infrastructure.DataAccess.ORM;

#nullable disable

namespace TaskManagementSystem.DashboardService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250717200240_Init>")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskManagementSystem.TaskBoardService.Core.Aggregates.TaskBoardAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.HasKey("Id")
                        .HasName("pk_task_boards");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_task_boards_organization_id");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_task_boards_organization_id_name");

                    b.ToTable("task_boards", (string)null);
                });

            modelBuilder.Entity("TaskManagementSystem.TaskBoardService.Core.Aggregates.TaskBoardAggregate", b =>
                {
                    b.OwnsOne("TaskManagementSystem.SharedLib.ValueObjects.AuthorInfo", "AuthorInfo", b1 =>
                        {
                            b1.Property<Guid>("TaskBoardAggregateId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("CreatedById")
                                .HasColumnType("uuid")
                                .HasColumnName("created_by_id");

                            b1.Property<Guid>("UpdatedById")
                                .HasColumnType("uuid")
                                .HasColumnName("updated_by_id");

                            b1.HasKey("TaskBoardAggregateId");

                            b1.ToTable("task_boards");

                            b1.WithOwner()
                                .HasForeignKey("TaskBoardAggregateId")
                                .HasConstraintName("fk_task_boards_task_boards_id");
                        });

                    b.OwnsOne("TaskManagementSystem.AuthService.Core.ValueObjects.Timestamps", "Timestamps", b1 =>
                        {
                            b1.Property<Guid>("TaskBoardAggregateId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_at");

                            b1.HasKey("TaskBoardAggregateId");

                            b1.ToTable("task_boards");

                            b1.WithOwner()
                                .HasForeignKey("TaskBoardAggregateId")
                                .HasConstraintName("fk_task_boards_task_boards_id");
                        });

                    b.OwnsMany("TaskManagementSystem.TaskBoardService.Core.Models.TaskBoardColumnModel", "Columns", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("BoardId")
                                .HasColumnType("uuid")
                                .HasColumnName("board_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");

                            b1.Property<int>("Order")
                                .HasColumnType("integer")
                                .HasColumnName("order");

                            b1.Property<Guid>("board_id")
                                .HasColumnType("uuid")
                                .HasColumnName("board_id");

                            b1.HasKey("Id")
                                .HasName("pk_task_board_columns");

                            b1.HasIndex("board_id")
                                .HasDatabaseName("ix_task_board_columns_board_id");

                            b1.HasIndex("Name", "BoardId")
                                .IsUnique()
                                .HasDatabaseName("ix_task_board_columns_name_board_id");

                            b1.ToTable("task_board_columns", null, t =>
                                {
                                    t.Property("board_id")
                                        .HasColumnName("board_id1");
                                });

                            b1.WithOwner()
                                .HasForeignKey("board_id")
                                .HasConstraintName("fk_task_board_columns_task_boards_board_id");

                            b1.OwnsOne("TaskManagementSystem.SharedLib.ValueObjects.AuthorInfo", "AuthorInfo", b2 =>
                                {
                                    b2.Property<Guid>("TaskBoardColumnModelId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<Guid>("CreatedById")
                                        .HasColumnType("uuid")
                                        .HasColumnName("created_by_id");

                                    b2.Property<Guid>("UpdatedById")
                                        .HasColumnType("uuid")
                                        .HasColumnName("updated_by_id");

                                    b2.HasKey("TaskBoardColumnModelId");

                                    b2.ToTable("task_board_columns");

                                    b2.WithOwner()
                                        .HasForeignKey("TaskBoardColumnModelId")
                                        .HasConstraintName("fk_task_board_columns_task_board_columns_id");
                                });

                            b1.OwnsOne("TaskManagementSystem.AuthService.Core.ValueObjects.Timestamps", "Timestamps", b2 =>
                                {
                                    b2.Property<Guid>("TaskBoardColumnModelId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<DateTime>("CreatedAt")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("created_at");

                                    b2.Property<DateTime>("UpdatedAt")
                                        .HasColumnType("timestamp with time zone")
                                        .HasColumnName("updated_at");

                                    b2.HasKey("TaskBoardColumnModelId");

                                    b2.ToTable("task_board_columns");

                                    b2.WithOwner()
                                        .HasForeignKey("TaskBoardColumnModelId")
                                        .HasConstraintName("fk_task_board_columns_task_board_columns_id");
                                });

                            b1.Navigation("AuthorInfo")
                                .IsRequired();

                            b1.Navigation("Timestamps")
                                .IsRequired();
                        });

                    b.Navigation("AuthorInfo")
                        .IsRequired();

                    b.Navigation("Columns");

                    b.Navigation("Timestamps")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
